name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *" # 每天凌晨1点自动运行
  workflow_dispatch:     # 支持手动运行
    inputs:
      release-type:
        description: '请选择更新类型'
        required: true
        default: '正式版'
        type: choice
        options:
        - '正式版'
        - '测试版'
      force-update:
        description: '是否强制更新（忽略版本比较）'
        required: false
        default: '否'
        type: choice
        options:
        - '是'
        - '否'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 初始化仓库
        uses: actions/checkout@v4

      - name: 检查或创建README.md
        run: |
          if [ ! -f "README.md" ]; then
            echo -e "# Worker自动更新说明\n\n1. **手动更新**：\n   - 通过 GitHub Actions 界面手动触发，可选择更新类型和是否强制更新\n2. **自动更新**：\n   - 每天凌晨1点自动检查更新\n   - 正式版优先：若正式版版本号高于测试版，将自动覆盖测试版更新\n3. **版本保护**：\n   - 保留 README.md 和 自动更新类型.txt" > README.md
          fi

      - name: 设置更新类型
        id: set_update_type
        run: |
          # 从手动输入或文件获取更新类型
          if [ ! -f "自动更新类型.txt" ]; then
            echo "初始化自动更新类型文件"
            echo "${{ github.event.inputs.release-type || '正式版' }}" > "自动更新类型.txt"
          elif [ -n "${{ github.event.inputs.release-type }}" ]; then
            echo "更新自动更新类型文件"
            echo "${{ github.event.inputs.release-type }}" > "自动更新类型.txt"
          fi
          
          UPDATE_TYPE=$(cat "自动更新类型.txt")
          echo "当前更新类型: $UPDATE_TYPE"
          echo "VERSION_TYPE=$UPDATE_TYPE" >> $GITHUB_ENV
          echo "IS_PRERELEASE=$([ "$UPDATE_TYPE" = "测试版" ] && echo "true" || echo "false")" >> $GITHUB_ENV
          echo "FORCE_UPDATE=$([ "${{ github.event.inputs.force-update }}" = "是" ] && echo "true" || echo "false")" >> $GITHUB_ENV

      - name: 获取当前版本
        id: get_current_version
        run: |
          if [ -f "version.txt" ]; then
            CURRENT_VERSION=$(awk '/当前版本/{print $2}' version.txt)
            CURRENT_TYPE=$(awk '/版本类型/{print $2}' version.txt)
            echo "当前版本: $CURRENT_VERSION (类型: $CURRENT_TYPE)"
          else
            echo "未检测到本地版本"
            CURRENT_VERSION=""
            CURRENT_TYPE=""
          fi
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "CURRENT_TYPE=$CURRENT_TYPE" >> $GITHUB_ENV

      - name: 获取远程Release
        id: fetch_releases
        run: |
          API_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases"
          RELEASES=$(curl -s "$API_URL")
          
          # 提取最新正式版和测试版
          STABLE_RELEASE=$(echo "$RELEASES" | jq -r '[.[] | select(.prerelease == false)][0]')
          PRERELEASE=$(echo "$RELEASES" | jq -r '[.[] | select(.prerelease == true)][0]')
          
          STABLE_TAG=$(echo "$STABLE_RELEASE" | jq -r '.tag_name')
          PRERELEASE_TAG=$(echo "$PRERELEASE" | jq -r '.tag_name')

          # 版本优先级逻辑
          if [ "$STABLE_TAG" != "null" ] && [ "$PRERELEASE_TAG" != "null" ]; then
            if [ "$(printf '%s\n' "$PRERELEASE_TAG" "$STABLE_TAG" | sort -V | head -n1)" = "$PRERELEASE_TAG" ] && \
               [ "$PRERELEASE_TAG" != "$STABLE_TAG" ]; then
              echo -e "\033[33m[优先级] 正式版($STABLE_TAG) > 测试版($PRERELEASE_TAG)，强制使用正式版\033[0m"
              TARGET_RELEASE=$STABLE_RELEASE
              TARGET_TYPE="正式版"
              echo "FORCE_UPDATE=true" >> $GITHUB_ENV
            else
              TARGET_RELEASE=$([ "$VERSION_TYPE" = "正式版" ] && echo "$STABLE_RELEASE" || echo "$PRERELEASE")
              TARGET_TYPE=$VERSION_TYPE
            fi
          else
            TARGET_RELEASE=$([ "$VERSION_TYPE" = "正式版" ] && echo "$STABLE_RELEASE" || echo "$PRERELEASE")
            TARGET_TYPE=$VERSION_TYPE
          fi

          # 验证目标版本
          if [ "$TARGET_RELEASE" = "null" ]; then
            echo -e "\033[31m错误: 未找到${TARGET_TYPE}版本\033[0m"
            exit 1
          fi

          DOWNLOAD_URL=$(echo "$TARGET_RELEASE" | jq -r '.assets[] | select(.name == "worker.zip") | .browser_download_url')
          if [ -z "$DOWNLOAD_URL" ]; then
            echo -e "\033[31m错误: 未找到worker.zip\033[0m"
            exit 1
          fi

          echo "最终目标: $TARGET_TYPE $(echo "$TARGET_RELEASE" | jq -r '.tag_name')"
          echo "TAG_NAME=$(echo "$TARGET_RELEASE" | jq -r '.tag_name')" >> $GITHUB_ENV
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "TARGET_TYPE=$TARGET_TYPE" >> $GITHUB_ENV

      - name: 执行更新
        if: env.FORCE_UPDATE == 'true' || env.CURRENT_VERSION != env.TAG_NAME
        run: |
          echo -e "\033[34m[开始更新] 版本: ${TAG_NAME} (类型: ${TARGET_TYPE})\033[0m"
          
          # 清理旧文件（保留配置）
          find . -mindepth 1 -not -name "README.md" -not -name "自动更新类型.txt" -delete
          
          # 下载并解压新版本
          wget -q -O worker.zip "$DOWNLOAD_URL"
          unzip -q worker.zip && rm worker.zip
          
          # 更新版本记录
          cat <<EOF > version.txt
          当前版本: $TAG_NAME
          版本类型: $TARGET_TYPE
          更新时间: $(date '+%Y-%m-%d %H:%M:%S')
          更新方式: $([ "$FORCE_UPDATE" = "true" ] && echo "强制更新" || echo "自动更新")
          EOF

      - name: 提交更改
        if: env.FORCE_UPDATE == 'true' || env.CURRENT_VERSION != env.TAG_NAME
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "更新 Worker: ${TAG_NAME} (${TARGET_TYPE})"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
