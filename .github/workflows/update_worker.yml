name: Auto Update Worker

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 1 * * *" # 每天凌晨1点自动运行
  workflow_dispatch:     # 支持手动运行
    inputs:
      release-type:
        description: '请选择更新类型'
        required: true
        default: '正式版'
        type: choice
        options:
        - '正式版'
        - '测试版'
      force-update:
        description: '是否强制更新（忽略版本比较）'
        required: false
        default: '否'
        type: choice
        options:
        - '是'
        - '否'

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: 初始化仓库
        uses: actions/checkout@v4

      - name: 检查或创建README.md
        run: |
          if [ ! -f "README.md" ]; then
            echo -e "1. **手动强制更新**：\n   - 可以手动找到项目Actions/All workflows/Auto Update Worker/Run workflow选择更新类型和是否强制更新，手动更新选项可选择是否强制更新（忽略版本比较）\n2. **自动更新类型，可根据需要自行修改，变量值为**：\n   - 正式版或测试版\n   - 根据项目设置定时触发自动更新\n   - 只有当远程版本更高时才触发更新\n   - 相同版本或更低版本都不触发更新\n3. **版本类型控制**：\n   - 只检查与\"自动更新类型.txt\"设置完全匹配的版本类型\n   - 若指定类型无可用版本，直接退出不尝试其他类型\n   - 当设置为测试版时，如果正式版版本更高，会自动更新到正式版\n " > README.md
            echo "已创建README.md文件"
          fi

      - name: 检查或创建自动更新类型文件
        id: check_update_type
        run: |
          echo -e "\033[34m[检查自动更新类型文件]\033[0m"
          if [ ! -f "自动更新类型.txt" ]; then
            echo "自动更新类型文件不存在，创建新文件"
            UPDATE_TYPE="${{ github.event.inputs.release-type || '正式版' }}"
            echo "$UPDATE_TYPE" > "自动更新类型.txt"
            echo "已创建自动更新类型文件，设置为: $UPDATE_TYPE"
          else
            # 如果手动指定了类型，则更新文件
            if [ -n "${{ github.event.inputs.release-type }}" ]; then
              UPDATE_TYPE="${{ github.event.inputs.release-type }}"
              echo "$UPDATE_TYPE" > "自动更新类型.txt"
              echo "已更新自动更新类型为: $UPDATE_TYPE"
            else
              UPDATE_TYPE=$(cat "自动更新类型.txt")
              echo "当前自动更新类型: $UPDATE_TYPE"
            fi
          fi
          
          echo "VERSION_TYPE=$UPDATE_TYPE" >> $GITHUB_ENV
          [ "$UPDATE_TYPE" = "测试版" ] && echo "IS_PRERELEASE=true" >> $GITHUB_ENV || echo "IS_PRERELEASE=false" >> $GITHUB_ENV
          # 将"是/否"转换为"true/false"
          [ "${{ github.event.inputs.force-update }}" = "是" ] && echo "FORCE_UPDATE=true" >> $GITHUB_ENV || echo "FORCE_UPDATE=false" >> $GITHUB_ENV

      - name: 获取当前本地版本
        id: get_local_version
        run: |
          echo -e "\033[34m[获取本地版本]\033[0m"
          if [ -f version.txt ]; then
            LOCAL_VERSION=$(grep '当前版本' version.txt | awk '{print $2}')
            LOCAL_TYPE=$(grep '版本类型' version.txt | awk '{print $2}')
            echo "当前本地版本: $LOCAL_VERSION (类型: $LOCAL_TYPE)"
          else
            echo "首次同步，没有本地版本。"
            LOCAL_VERSION=""
            LOCAL_TYPE=""
          fi
          echo "LOCAL_VERSION=$LOCAL_VERSION" >> $GITHUB_ENV
          echo "LOCAL_TYPE=$LOCAL_TYPE" >> $GITHUB_ENV

      - name: 获取所有Release信息
        id: get_releases
        run: |
          echo -e "\033[34m[获取所有Release信息]\033[0m"
          API_URL="https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases"
          RESPONSE=$(curl -s "$API_URL")
          
          # 获取最新正式版和测试版
          LATEST_STABLE=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == false)][0]')
          LATEST_PRERELEASE=$(echo "$RESPONSE" | jq -r '[.[] | select(.prerelease == true)][0]')
          
          # 提取版本号
          STABLE_TAG=$(echo "$LATEST_STABLE" | jq -r '.tag_name')
          PRERELEASE_TAG=$(echo "$LATEST_PRERELEASE" | jq -r '.tag_name')
          
          echo "最新正式版: ${STABLE_TAG:-无}"
          echo "最新测试版: ${PRERELEASE_TAG:-无}"
          
          # 严格根据自动更新类型选择目标版本
          if [ "$VERSION_TYPE" = "正式版" ]; then
            if [ "$LATEST_STABLE" != "null" ]; then
              TARGET_RELEASE=$LATEST_STABLE
              TAG_NAME=$STABLE_TAG
              echo "目标版本: 正式版 $TAG_NAME"
            else
              echo -e "\033[33m无可用正式版，放弃更新\033[0m"
              echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
              exit 0
            fi
          else
            # 测试版模式下，检查正式版是否更高
            if [ "$LATEST_STABLE" != "null" ] && [ "$LATEST_PRERELEASE" != "null" ]; then
              # 比较正式版和测试版版本号
              if [ "$(printf '%s\n' "$PRERELEASE_TAG" "$STABLE_TAG" | sort -V | head -n1)" = "$PRERELEASE_TAG" ] && \
                 [ "$PRERELEASE_TAG" != "$STABLE_TAG" ]; then
                echo -e "\033[33m[版本比较] 正式版($STABLE_TAG)高于测试版($PRERELEASE_TAG)，优先更新到正式版\033[0m"
                TARGET_RELEASE=$LATEST_STABLE
                TAG_NAME=$STABLE_TAG
                echo "VERSION_TYPE=正式版" >> $GITHUB_ENV  # 临时覆盖版本类型
                echo "目标版本: 正式版 $TAG_NAME (因版本更高)"
              else
                TARGET_RELEASE=$LATEST_PRERELEASE
                TAG_NAME=$PRERELEASE_TAG
                echo "目标版本: 测试版 $TAG_NAME"
              fi
            elif [ "$LATEST_PRERELEASE" != "null" ]; then
              TARGET_RELEASE=$LATEST_PRERELEASE
              TAG_NAME=$PRERELEASE_TAG
              echo "目标版本: 测试版 $TAG_NAME"
            else
              echo -e "\033[33m无可用测试版，放弃更新\033[0m"
              echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
              exit 0
            fi
          fi
          
          DOWNLOAD_URL=$(echo "$TARGET_RELEASE" | jq -r '.assets[] | select(.name == "worker.zip") | .browser_download_url')

          if [ -z "$DOWNLOAD_URL" ] || [ "$DOWNLOAD_URL" = "null" ]; then
            echo -e "\033[31m未找到 worker.zip，退出！\033[0m"
            exit 1
          fi

          echo "最终下载版本: $TAG_NAME (类型: $VERSION_TYPE)"
          echo "DOWNLOAD_URL=$DOWNLOAD_URL" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

          # 如果是强制更新，跳过版本比较
          if [ "$FORCE_UPDATE" = "true" ]; then
            echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
            echo -e "\033[33m[强制更新] 已选择强制更新，忽略版本比较，强制更新到 $TAG_NAME\033[0m"
          else
            # 版本比较：只有当目标版本严格更高时才更新
            if [ -n "$LOCAL_VERSION" ]; then
              if [ "$(printf '%s\n' "$LOCAL_VERSION" "$TAG_NAME" | sort -V | head -n1)" = "$LOCAL_VERSION" ] && \
                 [ "$LOCAL_VERSION" != "$TAG_NAME" ]; then
                echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
                echo -e "\033[33m[版本比较] 当前版本($LOCAL_VERSION)低于目标版本($TAG_NAME)，需要更新\033[0m"
              else
                echo "UPDATE_NEEDED=false" >> $GITHUB_ENV
                echo -e "\033[32m当前版本已是最新或更高版本，无需更新\033[0m"
              fi
            else
              echo "UPDATE_NEEDED=true" >> $GITHUB_ENV
              echo -e "\033[33m首次运行，需要初始化版本\033[0m"
            fi
          fi

      - name: 如果需要，清理旧文件并下载新版本
        if: env.UPDATE_NEEDED == 'true'
        run: |
          echo -e "\033[34m[清理旧文件]\033[0m"
          # 保护README.md和自动更新类型文件不被删除
          PROTECTED_FILES="README.md 自动更新类型.txt"
          for file in *; do
            if [[ "$PROTECTED_FILES" != *"$file"* ]]; then
              echo "删除文件: $file"
              rm -rf "$file"
            fi
          done
          
          echo -e "\033[34m[下载最新 worker.zip]\033[0m"
          wget -O worker.zip "$DOWNLOAD_URL"
          echo -e "\033[34m[解压 worker.zip]\033[0m"
          unzip worker.zip
          echo -e "\033[34m[删除 worker.zip]\033[0m"
          rm worker.zip
          echo -e "\033[34m[记录版本信息]\033[0m"
          echo "当前版本: $TAG_NAME" > version.txt
          echo "版本类型: $VERSION_TYPE" >> version.txt
          echo "更新时间: $(date '+%Y-%m-%d %H:%M:%S')" >> version.txt
          if [ "$FORCE_UPDATE" = "true" ]; then
            echo "更新备注: 手动强制更新" >> version.txt
          fi

      - name: 提交更改
        if: env.UPDATE_NEEDED == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: " ${{ env.FORCE_UPDATE == 'true' && '强制' || '' }}同步最新 Worker 版本：${{ env.TAG_NAME }} (类型: ${{ env.VERSION_TYPE }})"
          commit_author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
          push_options: --force